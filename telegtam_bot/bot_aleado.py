import asyncio
import configparser
import sys
from datetime import datetime
from pathlib import Path
import pytz

from aiogram import Bot
from loguru import logger

sys.path.append(str(Path.cwd()))
sys.path.append(str(Path.cwd().parent))

from database import SQLite_operations
from Aleado.main import get_data as get_data_aleado

#–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è logger
logger.add("logfile.log", format="{time} {level} {message}",
           level="INFO", rotation="500 MB")

# –î–æ—Å—Ç–∞—Ç—å API_TOKEN –∏–∑ config.ini
config = configparser.ConfigParser()
dir_conf = Path.cwd()
# dir_conf = dir_conf.parent
dir_conf = dir_conf.joinpath('config.ini')

config.read(dir_conf)
API_TOKEN = config['telegram']['API_TOKEN']
CHAT_ID = config['telegram']['CHAT_ID_ALEADO']

krasnoyarsk_tz = pytz.timezone('Asia/Krasnoyarsk')
# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Path –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞
current_dir = Path.cwd()
dir_db = current_dir

path_db = dir_db.joinpath('DB.db')
# path_db = dir_db.joinpath('data/DB.db')

db = SQLite_operations(path_db, 'Aleado')


def get_messages(start_time):
    current_time = datetime.now(krasnoyarsk_tz).strftime("%Y-%m-%d %H:%M:%S")
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π —Å {start_time} –ø–æ {current_time}")

    messages = db.find_unsent_records()

    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(messages)} "
                f"–Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")

    return messages


def format_order_message(bid_number, link, auction, photo, company, model, grade, year, mileage, inspection,
                          displacement, transmission, color, model_type, start_price, end_price, result, scores, sended):
    message = f"üî¢ {bid_number}\n" \
                f"üî® –ê—É–∫—Ü–∏–æ–Ω: {auction}\n" \
                f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: {company}\n" \
                f"üöó –ú–æ–¥–µ–ª—å: {model}\n" \
                f'üîß –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è: {grade}\n' \
                f"üìÖ –ì–æ–¥: {year}\n" \
                f"üõ£Ô∏è –ü—Ä–æ–±–µ–≥: {mileage}\n" \
                f"üîç –û—Å–º–æ—Ç—Ä: {inspection}\n" \
                f"üìè –û–±—ä–µ–º: {displacement}\n" \
                f'üîÄ –ö–æ—Ä–æ–±–∫–∞: {transmission}\n' \
                f'üé® –¶–≤–µ—Ç: {color}\n' \
                f'üöò –¢–∏–ø –∫—É–∑–æ–≤–∞: {model_type}\n' \
                f'üìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}\n' \
                f'üèÜ –û—Ü–µ–Ω–∫–∞: {scores}\n' \
                f'üñºÔ∏è –§–æ—Ç–æ: {photo}\n' \
                f'üîó –°—Å—ã–ª–∫–∞: {link}\n' \

    return message


async def send_messages_to_chat(message):
    try:
        await bot.send_message(CHAT_ID, message, disable_notification=True, request_timeout=30)
        title = message.split('\n\n')[0]
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {title}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç: {e}")


async def main():
    start_time = datetime.now(krasnoyarsk_tz).strftime("%Y-%m-%d %H:%M:%S")
    get_data_aleado()
    messages = get_messages(start_time)
    if messages:
        start_time = datetime.now(krasnoyarsk_tz).strftime("%Y-%m-%d %H:%M:%S")
    for message in messages:
        format_message = format_order_message(*message)
        await send_messages_to_chat(format_message)

        bid_number = message[0]
        db.update_sended(bid_number)

    await bot.session.close()


def run_telegram_wrapper():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
    loop.close()


if __name__ == '__main__':
    try:
        run_telegram_wrapper()
    except Exception as ex:
        logger.error(f"–û—à–∏–±–∫–∞: {ex}")
